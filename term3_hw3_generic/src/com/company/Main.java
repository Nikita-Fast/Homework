package com.company;public class Main {    public static void main(String[] args) {        /* код для сложения больших чисел        String a ="978637849047655";        String b ="24666478904876";        BigIntAddition bigIntAddition = new BigIntAddition();        bigIntAddition.calculate(4, a, b);        System.out.println(Arrays.toString(bigIntAddition.getResult()) + " <-- multiproc");        int[] resultSingle = BigIntAdditionSingleThreaded.calculate(a, b);        System.out.println(Arrays.toString(resultSingle) + " <-- single");        System.out.println(Arrays.equals(bigIntAddition.getResult(), resultSingle));         */        /* task 8        int length = 7;        Random random = new Random();        Pair<Integer, Integer>[] coefficients = new Pair[length];        for (int i = 0; i < length; i++) {            int a = random.nextInt(7);            if (i == 0) {                a = 0;            }            int b = random.nextInt(10);            coefficients[i] = new Pair<>(a, b);            System.out.println(coefficients[i]);        }        Result<Pair<Integer, Integer>> result = new Result<>();        LinearEquationSystemSolver solver = new LinearEquationSystemSolver();        solver.scan(4, coefficients, result);        System.out.println(result.getResult().getValue() + " <--- multicore");        int x = coefficients[0].getValue();        for(int i = 1; i < length; i++) {            x = coefficients[i].getKey() * x + coefficients[i].getValue();        }        System.out.println(x + " single");         */        /* brackets        String s = "(()())())()";        Integer[] array = new Integer[s.length()];        for (int i = 0; i < s.length(); i++) {            array[i] = (s.charAt(i) == '(') ? 1 : -1;        }        System.out.println(Arrays.toString(array));        Result<Integer> findMinRes = new Result<>();        ParallelBracketsMatching parallelBracketsMatching = new ParallelBracketsMatching();        parallelBracketsMatching.scan(4, array, findMinRes);        System.out.println(Arrays.toString(array));        System.out.println(findMinRes.getResult());        System.out.println(parallelBracketsMatching.res);         */        /* turtle        //создаём массив векторов на основе массива пар (a, r) углов и радиусов        //применяем функцию сложения векторов используя parallelScanleftToRight        MyVector v1 = new MyVector(45, 4);        MyVector v2 = new MyVector(30, 5);        VectorAddition op = new VectorAddition();        MyVector v12 = op.apply(v1, v2);        System.out.println(v12);        MyVector v3 = new MyVector(105, 4);        MyVector v4 = new MyVector(90, 2);        MyVector v34 = op.apply(v3, v4);        System.out.println(v34);        System.out.println(op.apply(v12, v34));         */    }}