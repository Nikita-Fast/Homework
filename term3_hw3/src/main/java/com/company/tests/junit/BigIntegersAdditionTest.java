package com.company.tests.junit;

import com.company.algorithms.BigIntegersAddition;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.junit.jupiter.params.provider.ValueSource;
import org.junit.jupiter.api.Test;
import java.util.Random;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;

public class BigIntegersAdditionTest {

    private final String s1 =            "372232800981245617380333673823095867";
    private final String s2 =               "878443443333456764367840038636452";
    private final String expectedValue = "373111244424579074144701513861732319";
    private String actualValue;
    private static final int ITERATIONS = 100;

    @ParameterizedTest
    @ValueSource(ints = {1, 2, 4, 8, 16})
    void addInParallel(int threadsNumber) throws InterruptedException {
        actualValue = BigIntegersAddition.addInParallel(threadsNumber, s1, s2);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    void addWithSingleThread() {
        actualValue = BigIntegersAddition.addWithSingleThread(s1, s2);
        assertEquals(expectedValue, actualValue);
    }

    //This test uses BigIntegersAddition.addWithSingleThread as a source of expected value
    @ParameterizedTest
    @MethodSource("provideParameters")
    void addInParallelInputOfDifferentLength(int threadsNumber, int baseLength) throws InterruptedException {
        addInParallelTestedOnAutoGeneratedSamples(threadsNumber, baseLength);
    }

    private static Stream<Arguments> provideParameters() {
        Arguments[] arguments = new Arguments[25];
        int k = 0;
        for (int threads = 1; threads <= 16; threads *= 2) {
            for (int length = 10; length < 1000; length = length * 3 + 3) {
                arguments[k++] = Arguments.of(threads, length);
            }
        }
        return Stream.of(arguments);
    }

    private void addInParallelTestedOnAutoGeneratedSamples(int threadsNumber, int baseLength) throws InterruptedException {
        for (int i = 0; i < ITERATIONS; i++) {
            String s1 = generateInputString(baseLength);
            String s2 = generateInputString(baseLength);
            String actual = BigIntegersAddition.addInParallel(threadsNumber, s1, s2);
            String expected = BigIntegersAddition.addWithSingleThread(s1, s2);
            assertEquals(expected, actual, "s1 = " + s1 + ", s2 = " + s2);
        }
    }


    private String generateInputString(int baseLength) {
        int length;
        Random random = new Random();
        do {
            length = random.nextInt(2 * baseLength);
        } while (baseLength / 2 >= length);
        StringBuilder sb = new StringBuilder();
        int digit;
        do {
            digit = random.nextInt(10);
        } while (digit == 0);
        sb.append(digit);
        for (int i = 1; i < length; i++) {
            sb.append(random.nextInt(10));
        }
        return sb.toString();
    }
}
